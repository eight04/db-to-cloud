{"version":3,"file":"db-to-cloud.js","sources":["../node_modules/@eight04/read-write-lock/index.js","../lib/lock.js","../lib/util.js","../lib/db-to-cloud.js","../shim/empty.js","../node_modules/universal-base64/dist/browser.js","../lib/request.js","../lib/drive/github.js","../lib/drive/dropbox.js","../lib/drive/onedrive.js","../lib/drive/google.js","../shim/path.mjs","../lib/drive/webdav.js"],"sourcesContent":["function createLock({maxActiveReader = Infinity} = {}) {\r\n  let firstTask;\r\n  let lastTask;\r\n  let activeReader = 0;\r\n  const self = {\r\n    read: fn => que(fn, false),\r\n    write: fn => que(fn, true),\r\n    length: 0\r\n  };\r\n  return self;\r\n  \r\n  function que(fn, block) {\r\n    const task = createTask({fn, block});\r\n    if (!lastTask) {\r\n      firstTask = lastTask = task;\r\n    } else {\r\n      lastTask.next = task;\r\n      task.prev = lastTask;\r\n      lastTask = task;\r\n      if (!firstTask) {\r\n        firstTask = lastTask;\r\n      }\r\n    }\r\n    self.length++;\r\n    deque();\r\n    return task.q.promise;\r\n  }\r\n  \r\n  function defer() {\r\n    const o = {};\r\n    o.promise = new Promise((resolve, reject) => {\r\n      o.resolve = resolve;\r\n      o.reject = reject;\r\n    });\r\n    return o;\r\n  }\r\n  \r\n  function createTask({\r\n    fn,\r\n    block = false,\r\n    prev,\r\n    next,\r\n    q = defer(),\r\n    q2 = fn.length ? defer() : null\r\n  }) {\r\n    return {fn, block, prev, next, q, q2};\r\n  }\r\n  \r\n  function deque() {\r\n    const task = firstTask;\r\n    if (\r\n      !task ||\r\n      task.block && task.prev ||\r\n      task.prev && task.prev.block ||\r\n      activeReader >= maxActiveReader\r\n    ) {\r\n      return;\r\n    }\r\n    if (!task.block) {\r\n      activeReader++;\r\n    }\r\n    firstTask = task.next;\r\n    let result;\r\n    try {\r\n      result = task.fn(task.q2 && task.q2.resolve);\r\n    } catch (err) {\r\n      task.q.reject(err);\r\n      // auto release with sync error\r\n      // q2 is useless in this case\r\n      onDone();\r\n      return;\r\n    }\r\n    if (task.q2) {\r\n      task.q2.promise.then(_onDone);\r\n    }\r\n    if (result && result.then) {\r\n      const pending = result.then(task.q.resolve, task.q.reject);\r\n      if (!task.q2) {\r\n        pending.then(onDone);\r\n      }\r\n    } else {\r\n      task.q.resolve(result);\r\n      if (!task.q2) {\r\n        // it's a sync function and you don't want to release it manually, why\r\n        // do you need a lock?\r\n        onDone();\r\n        return;\r\n      }\r\n    }\r\n    deque();\r\n    \r\n    function onDone() {\r\n      _onDone();\r\n    }\r\n    \r\n    function _onDone(afterDone) {\r\n      if (task.prev) {\r\n        task.prev.next = task.next;\r\n      }\r\n      if (task.next) {\r\n        task.next.prev = task.prev;\r\n      }\r\n      if (lastTask === task) {\r\n        lastTask = task.prev;\r\n      }\r\n      if (!task.block) {\r\n        activeReader--;\r\n      }\r\n      self.length--;\r\n      if (afterDone) {\r\n        afterDone();\r\n      }\r\n      deque();\r\n    }\r\n  }\r\n}\r\n\r\nfunction createLockPool(options) {\r\n  const locks = new Map; // scope -> lock\r\n  return {\r\n    read: (scope, fn) => op(scope, fn, \"read\"),\r\n    write: (scope, fn) => op(scope, fn, \"write\"),\r\n    locks\r\n  };\r\n  \r\n  async function op(scopeIter, fn, opType) {\r\n    // FIXME: dead lock if there are duplicated scopes?\r\n    const scopes = [];\r\n    const acquiring = [];\r\n    for (const scope of scopeIter) {\r\n      let lock = locks.get(scope);\r\n      if (!lock) {\r\n        lock = createLock(options);\r\n        locks.set(scope, lock);\r\n      }\r\n      const o = {\r\n        lock,\r\n        scope,\r\n        relase: null\r\n      };\r\n      acquiring.push(lock[opType](release => {\r\n        o.release = release;\r\n      }));\r\n      scopes.push(o);\r\n    }\r\n    await Promise.all(acquiring);\r\n    let result;\r\n    try {\r\n      result = fn(fn.length && onDone);\r\n    } catch (err) {\r\n      onDone();\r\n      throw err;\r\n    }\r\n    if (result && result.then) {\r\n      if (!fn.length) {\r\n        result.then(onDone, onDone);\r\n      }\r\n      return await result;\r\n    }\r\n    if (!fn.length) {\r\n      onDone();\r\n    }\r\n    return result;\r\n    \r\n    function onDone() {\r\n      for (const scope of scopes) {\r\n        scope.release(() => {\r\n          if (!scope.lock.length) {\r\n            locks.delete(scope.scope);\r\n          }\r\n        });\r\n      }\r\n      scopes.length = 0;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  createLock,\r\n  createLockPool\r\n};\r\n","class LockError extends Error {\n  constructor(expire) {\n    super(`The database is locked. Will expire at ${new Date(expire).toLocaleString()}`);\n    this.expire = expire;\n    this.name = \"LockError\";\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, LockError);\n    }\n  }\n}\n\nmodule.exports = {LockError};\n","function debounced(fn) {\n  let timer = 0;\n  let q;\n  return () => {\n    if (timer) {\n      clearTimeout(timer);\n    }\n    timer = setTimeout(run);\n    if (!q) {\n      q = defer();\n    }\n    return q.promise;\n  };\n  \n  function run() {\n    Promise.resolve(fn())\n      .then(q.resolve, q.reject);\n    timer = 0;\n    q = null;\n  }\n  \n  function defer() {\n    const o = {};\n    o.promise = new Promise((resolve, reject) => {\n      o.resolve = resolve;\n      o.reject = reject;\n    });\n    return o;\n  }\n}\n\nfunction delay(time) {\n  return new Promise(resolve => setTimeout(resolve, time));\n}\n\nfunction xmlToJSON(node) {\n  // FIXME: xmldom doesn't support children\n  const children = Array.prototype.filter.call(node.childNodes, i => i.nodeType === 1);\n  if (!children.length) {\n    return node.textContent;\n  }\n  \n  const o = {};\n  for (const c of children) {\n    const cResult = xmlToJSON(c);\n    if (!o[c.localName]) {\n      o[c.localName] = cResult;\n    } else if (!Array.isArray(o[c.localName])) {\n      const list = [o[c.localName]];\n      list.push(cResult);\n      o[c.localName] = list;\n    } else {\n      o[c.localName].push(cResult);\n    }\n  }\n  return o;\n}\n\nfunction createXMLParser(DOMParser) {\n  let parser;\n  return function parseXML(text) {\n    if (!parser) {\n      parser = new DOMParser();\n    }\n    const xml = parser.parseFromString(text, \"application/xml\");\n    return xmlToJSON(xml);\n  };\n}\n\nmodule.exports = {debounced, delay, createXMLParser, xmlToJSON};\n","const {createLock} = require(\"@eight04/read-write-lock\");\nconst {LockError} = require(\"./lock\");\nconst {delay, debounced} = require(\"./util\");\n\nfunction buildDrive(_drive) {\n  const drive = Object.create(_drive);\n  drive.get = async path => JSON.parse(await _drive.get(path));\n  drive.put = async (path, data) => await _drive.put(path, JSON.stringify(data));\n  drive.post = async (path, data) => await _drive.post(path, JSON.stringify(data));\n  drive.isInit = false;\n  \n  if (!drive.acquireLock) {\n    drive.acquireLock = acquireLock;\n    drive.releaseLock = releaseLock;\n  }\n  \n  if (!drive.getMeta) {\n    drive.getMeta = getMeta;\n    drive.putMeta = putMeta;\n  }\n  \n  if (!drive.peekChanges) {\n    drive.peekChanges = peekChanges;\n  }\n  \n  return drive;\n  \n  async function acquireLock(expire) {\n    try {\n      await this.post(\"lock.json\", {expire: Date.now() + expire * 60 * 1000});\n    } catch (err) {\n      if (err.code !== \"EEXIST\") {\n        throw err;\n      }\n      const data = await this.get(\"lock.json\");\n      if (Date.now() > data.expire) {\n        // FIXME: this may delete a different lock created by other instances\n        await this.delete(\"lock.json\");\n        throw new Error(\"Found expired lock, please try again\");\n      }\n      throw new LockError(data.expire);\n    }\n  }\n  \n  async function releaseLock() {\n    await this.delete(\"lock.json\");\n  }\n  \n  async function getMeta() {\n    try {\n      return await this.get(\"meta.json\");\n    } catch (err) {\n      if (err.code === \"ENOENT\" || err.code === 404) {\n        return {};\n      }\n      throw err;\n    }\n  }\n  \n  async function putMeta(data) {\n    await this.put(\"meta.json\", data);\n  }\n  \n  async function peekChanges(oldMeta) {\n    const newMeta = await this.getMeta();\n    return newMeta.lastChange !== oldMeta.lastChange;\n  }\n}\n\nfunction dbToCloud({\n  onGet,\n  onPut,\n  onDelete,\n  onFirstSync,\n  onWarn = console.error,\n  onProgress,\n  compareRevision,\n  getState,\n  setState,\n  lockExpire = 60,\n  retryMaxAttempts = 5,\n  retryExp = 1.5,\n  retryDelay = 10\n}) {\n  let drive;\n  let state;\n  let meta;\n  const changeCache = new Map;\n  const saveState = debounced(() => setState(drive, state));\n  const revisionCache = new Map;\n  const lock = createLock();\n  return {\n    use,\n    init,\n    uninit,\n    put,\n    delete: delete_,\n    syncNow,\n    drive: () => drive,\n    isInit: () => Boolean(state && state.enabled)\n  };\n  \n  function use(newDrive) {\n    drive = buildDrive(newDrive);\n  }\n  \n  function init() {\n    return lock.write(async () => {\n      if (state && state.enabled) {\n        return;\n      }\n      if (!drive) {\n        throw new Error(\"cloud drive is undefined\");\n      }\n      \n      state = await getState(drive) || {};\n      state.enabled = true;\n      if (!state.queue) {\n        state.queue = [];\n      }\n    });\n  }\n  \n  function uninit() {\n    return lock.write(async () => {\n      if (!state || !state.enabled) {\n        return;\n      }\n      state = meta = null;\n      changeCache.clear();\n      revisionCache.clear();\n      if (drive.uninit && drive.isInit) {\n        await drive.uninit();\n        drive.isInit = false;\n      }\n      await saveState();\n    });\n  }\n  \n  async function syncPull() {\n    meta = await drive.getMeta();\n    if (!meta.lastChange || meta.lastChange === state.lastChange) {\n      // nothing changes\n      return;\n    }\n    let changes = [];\n    if (!state.lastChange) {\n      // pull everything\n      changes = (await drive.list(\"docs\"))\n        .map(name => ({action: 'put', _id: name.slice(0, -5)}));\n    } else {\n      const end = Math.floor((meta.lastChange - 1) / 100); // inclusive end\n      let i = Math.floor(state.lastChange / 100);\n      while (i <= end) {\n        const newChanges = await drive.get(`changes/${i}.json`);\n        changeCache.set(i, newChanges);\n        changes = changes.concat(newChanges);\n        i++;\n      }\n      changes = changes.slice(state.lastChange % 100);\n    }\n    // merge changes\n    const idx = new Map;\n    for (const change of changes) {\n      idx.set(change._id, change);\n    }\n    let loaded = 0;\n    for (const [id, change] of idx) {\n      let doc, _rev;\n      if (onProgress) {\n        onProgress({\n          phase: 'pull',\n          total: idx.size,\n          loaded,\n          change\n        });\n      }\n      if (change.action === \"delete\") {\n        await onDelete(id, change._rev);\n      } else if (change.action === \"put\") {\n        try {\n          ({doc, _rev} = await drive.get(`docs/${id}.json`));\n        } catch (err) {\n          if (err.code === \"ENOENT\" || err.code === 404) {\n            onWarn(`Cannot find ${id}. Is it deleted without updating the history?`);\n            loaded++;\n            continue;\n          }\n          throw err;\n        }\n        await onPut(doc);\n      }\n      // record the remote revision\n      const rev = change._rev || _rev;\n      if (rev) {\n        revisionCache.set(id, rev);\n      }\n      loaded++;\n    }\n    state.lastChange = meta.lastChange;\n    await saveState();\n  }\n  \n  async function syncPush() {\n    if (!state.queue.length) {\n      // nothing to push\n      return;\n    }\n    // snapshot\n    const changes = state.queue.slice();\n\n    // merge changes\n    const idx = new Map;\n    for (const change of changes) {\n      idx.set(change._id, change);\n    }\n    // drop outdated change\n    const newChanges = [];\n    for (const change of idx.values()) {\n      // FIXME: is it safe to assume that the local doc is newer when\n      // remoteRev is undefined?\n      const remoteRev = revisionCache.get(change._id);\n      if (remoteRev !== undefined && compareRevision(change._rev, remoteRev) <= 0) {\n        continue;\n      }\n      newChanges.push(change);\n    }\n    // FIXME: there should be no need to push data when !newChanges.length\n    \n    // start pushing\n    let loaded = 0;\n    for (const change of newChanges) {\n      if (onProgress) {\n        onProgress({\n          phase: 'push',\n          loaded,\n          total: newChanges.length,\n          change\n        });\n      }\n      if (change.action === \"delete\") {\n        await drive.delete(`docs/${change._id}.json`);\n      } else if (change.action === \"put\") {\n        const doc = await onGet(change._id, change._rev);\n        await drive.put(`docs/${change._id}.json`, {doc, _rev: change._rev});\n      }\n      revisionCache.set(change._id, change._rev);\n      loaded++;\n    }\n    \n    // push changes\n    let lastChanges;\n    let index;\n    // meta is already pulled in syncPull\n    if (meta.lastChange) {\n      index = Math.floor(meta.lastChange / 100);\n      const len = meta.lastChange % 100;\n      lastChanges = len ?\n        changeCache.get(index) || await drive.get(`changes/${index}.json`) :\n        [];\n      // it is possible that JSON data contains more records defined by\n      // meta.lastChange\n      lastChanges = lastChanges.slice(0, len).concat(newChanges);\n    } else {\n      // first sync\n      index = 0;\n      lastChanges = newChanges;\n    }\n    \n    for (let i = 0; i * 100 < lastChanges.length; i++) {\n      const window = lastChanges.slice(i * 100, (i + 1) * 100);\n      await drive.put(`changes/${index + i}.json`, window);\n      changeCache.set(index + i, window);\n    }\n    meta.lastChange = (meta.lastChange || 0) + newChanges.length;\n    await drive.putMeta(meta);\n    \n    state.queue = state.queue.slice(changes.length);\n    state.lastChange = meta.lastChange;\n    await saveState();\n  }\n  \n  async function sync() {\n    let tried = 0;\n    let wait = retryDelay;\n    let lastErr;\n    while (true) { // eslint-disable-line no-constant-condition\n      try {\n        await drive.acquireLock(lockExpire);\n        break;\n      } catch (err) {\n        if (err.name !== \"LockError\") {\n          throw err;\n        }\n        lastErr = err;\n      }\n      tried++;\n      if (tried >= retryMaxAttempts) {\n        throw lastErr;\n      }\n      await delay(wait * 1000);\n      wait *= retryExp;\n    }\n    try {\n      await syncPull();\n      await syncPush();\n    } finally {\n      await drive.releaseLock();\n    }\n  }\n  \n  function syncNow(peek) {\n    return lock.write(async () => {\n      if (!state || !state.enabled) {\n        throw new Error(\"Cannot sync now, the sync is not enabled\");\n      }\n      if (drive.init && !drive.isInit) {\n        await drive.init();\n        drive.isInit = true;\n      }\n      if (state.lastChange == null) {\n        await onFirstSync();\n      }\n      await _syncNow(peek);\n    });\n  }\n  \n  async function _syncNow(peek = true) {\n    if (onProgress) {\n      onProgress({\n        phase: 'start'\n      });\n    }\n    try {\n      if (!state.queue.length && peek && meta) {\n        const changed = await drive.peekChanges(meta);\n        if (!changed) {\n          return;\n        }\n      }\n      await sync();\n    } finally {\n      if (onProgress) {\n        onProgress({\n          phase: 'end'\n        });\n      }\n    }\n  }\n  \n  function put(_id, _rev) {\n    if (!state || !state.enabled) {\n      return;\n    }\n    state.queue.push({\n      _id, _rev, action: \"put\"\n    });\n    saveState();\n  }\n  \n  function delete_(_id, _rev) {\n    if (!state || !state.enabled) {\n      return;\n    }\n    state.queue.push({\n      _id, _rev, action: \"delete\"\n    });\n    saveState();\n  }\n}\n\nmodule.exports = {dbToCloud};\n","module.exports = () => {};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction percentToByte(p) {\n    return String.fromCharCode(parseInt(p.slice(1), 16));\n}\nfunction encode(str) {\n    return btoa(encodeURIComponent(str).replace(/%[0-9A-F]{2}/g, percentToByte));\n}\nexports.encode = encode;\nfunction byteToPercent(b) {\n    return `%${`00${b.charCodeAt(0).toString(16)}`.slice(-2)}`;\n}\nfunction decode(str) {\n    return decodeURIComponent(Array.from(atob(str), byteToPercent).join(\"\"));\n}\nexports.decode = decode;\n//# sourceMappingURL=browser.js.map","const {createLock} = require(\"@eight04/read-write-lock\");\nconst base64 = require(\"universal-base64\");\n\nconst {delay} = require(\"./util\");\n\nclass RequestError extends Error {\n  constructor(message, origin, code = origin && origin.status) {\n    super(message);\n    this.code = code;\n    this.origin = origin;\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, RequestError);\n    }\n  }\n}\n\nfunction createRequest({fetch, cooldown = 0, getAccessToken, username, password}) {\n  const lock = createLock();\n  const basicAuth = username || password ?\n    `Basic ${base64.encode(`${username}:${password}`)}` :\n    null;\n  return args => {\n    return lock.write(async done => {\n      try {\n        return await doRequest(args);\n      } finally {\n        if (!cooldown || !args.method || args.method === \"GET\") {\n          done();\n        } else {\n          setTimeout(done, cooldown);\n        }\n      }\n    });\n  };\n  \n  async function doRequest({\n    path,\n    contentType,\n    headers: _headers,\n    format,\n    raw = false,\n    ...args\n  }) {\n    const headers = {};\n    if (getAccessToken) {\n      headers[\"Authorization\"] = `Bearer ${await getAccessToken()}`;\n    }\n    if (basicAuth) {\n      headers[\"Authorization\"] = basicAuth;\n    }\n    if (contentType) {\n      headers[\"Content-Type\"] = contentType;\n    }\n    Object.assign(headers, _headers);\n    while (true) { // eslint-disable-line no-constant-condition\n      // console.log(\"req\", path, args, headers);\n      const res = await fetch(path, {\n        headers,\n        ...args\n      });\n      // console.log(\"res\", path, args, res.status, headers);\n      if (!res.ok) {\n        const retry = res.headers.get(\"Retry-After\");\n        if (retry) {\n          const time = Number(retry);\n          if (time) {\n            await delay(time * 1000);\n            continue;\n          }\n        }\n        const text = await res.text();\n        throw new RequestError(`failed to fetch [${res.status}]: ${text}`, res);\n      }\n      if (raw) {\n        return res;\n      }\n      if (format) {\n        return await res[format]();\n      }\n      const resContentType = res.headers.get(\"Content-Type\");\n      if (/application\\/json/.test(resContentType)) {\n        return await res.json();\n      }\n      return await res.text();\n    }\n  }\n}\n\nmodule.exports = {createRequest, RequestError};\n","/* global self */\nconst base64 = require(\"universal-base64\");\n\nconst {createRequest} = require(\"../request\");\n\nfunction createDrive({\n  userAgent = \"db-to-cloud\",\n  owner,\n  repo,\n  getAccessToken,\n  fetch = (typeof self !== \"undefined\" ? self : global).fetch\n}) {\n  const request = createRequest({fetch, getAccessToken, cooldown: 1000});\n  const shaCache = new Map;\n  return {\n    name: \"github\",\n    get,\n    put,\n    post,\n    delete: delete_,\n    list,\n    shaCache\n  };\n  \n  function requestAPI(args) {\n    if (!args.headers) {\n      args.headers = {};\n    }\n    if (!args.headers[\"User-Agent\"]) {\n      args.headers[\"User-Agent\"] = userAgent;\n    }\n    if (!args.headers[\"Accept\"]) {\n      args.headers[\"Accept\"] = \"application/vnd.github.v3+json\";\n    }\n    args.path = `https://api.github.com${args.path}`;\n    return request(args);\n  }\n  \n  async function list(file) {\n    // FIXME: This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the Git Trees API.\n    const result = await requestAPI({\n      path: `/repos/${owner}/${repo}/contents/${file}`\n    });\n    const names = [];\n    for (const item of result) {\n      names.push(item.name);\n      shaCache.set(item.path, item.sha);\n    }\n    return names;\n  }\n  \n  async function get(file) {\n    // FIXME: This API supports files up to 1 megabyte in size.\n    const result = await requestAPI({\n      path: `/repos/${owner}/${repo}/contents/${file}`\n    });\n    shaCache.set(result.path, result.sha);\n    return base64.decode(result.content);\n  }\n  \n  async function put(file, data, overwrite = true) {\n    const params = {\n      message: \"\",\n      content: base64.encode(data)\n    };\n    if (overwrite && shaCache.has(file)) {\n      params.sha = shaCache.get(file);\n    }\n    const args = {\n      method: \"PUT\",\n      path: `/repos/${owner}/${repo}/contents/${file}`,\n      contentType: \"application/json\",\n      body: JSON.stringify(params)\n    };\n    let retried = false;\n    let result;\n    while (!result) {\n      try {\n        result = await requestAPI(args);\n      } catch (err) {\n        if (err.code !== 422 || !err.message.includes(\"\\\\\\\"sha\\\\\\\" wasn't supplied\")) {\n          throw err;\n        }\n        if (!overwrite || retried) {\n          err.code = \"EEXIST\";\n          throw err;\n        }\n        await get(file);\n      }\n      retried = true;\n    }\n    shaCache.set(file, result.content.sha);\n  }\n  \n  function post(file, data) {\n    return put(file, data, false);\n  }\n  \n  async function delete_(file) {\n    try {\n      let sha = shaCache.get(file);\n      if (!sha) {\n        await get(file);\n        sha = shaCache.get(file);\n      }\n      await requestAPI({\n        method: \"DELETE\",\n        path: `/repos/${owner}/${repo}/contents/${file}`,\n        body: JSON.stringify({\n          message: \"\",\n          sha\n        })\n      });\n    } catch (err) {\n      if (err.code === 404) {\n        return;\n      }\n      // FIXME: do we have to handle 422 errors?\n      throw err;\n    }\n  }\n}\n\nmodule.exports = createDrive;\n","/* global self */\nconst {createRequest} = require(\"../request\");\n\nfunction createDrive({\n  getAccessToken,\n  fetch = (typeof self !== \"undefined\" ? self : global).fetch\n}) {\n  const request = createRequest({fetch, getAccessToken});\n  return {\n    name: \"dropbox\",\n    get,\n    put,\n    post,\n    delete: delete_,\n    list\n  };\n  \n  function requestRPC({path, body, ...args}) {\n    return request({\n      method: \"POST\",\n      path: `https://api.dropboxapi.com/2/${path}`,\n      contentType: \"application/json\",\n      body: JSON.stringify(body),\n      ...args\n    });\n  }\n  \n  async function list(file) {\n    const names = [];\n    let result = await requestRPC({\n      path: \"files/list_folder\",\n      body: {\n        path: `/${file}`\n      }\n    });\n    for (const entry of result.entries) {\n      names.push(entry.name);\n    }\n    if (!result.has_more) {\n      return names;\n    }\n    while (result.has_more) {\n      result = await requestRPC({\n        path: \"files/list_folder/continue\",\n        body: {\n          cursor: result.cursor\n        }\n      });\n      for (const entry of result.entries) {\n        names.push(entry.name);\n      }\n    }\n    return names;\n  }\n  \n  function stringifyParams(obj) {\n    const params = new URLSearchParams;\n    params.set(\"arg\", JSON.stringify(obj));\n    return params.toString();\n  }\n  \n  async function get(file) {\n    const params = {\n      path: `/${file}`\n    };\n    try {\n      return await request({\n        path: `https://content.dropboxapi.com/2/files/download?${stringifyParams(params)}`,\n        format: \"text\"\n      });\n    } catch (err) {\n      if (err.code === 409 && err.message.includes(\"not_found\")) {\n        err.code = \"ENOENT\";\n      }\n      throw err;\n    }\n  }\n  \n  async function put(file, data, mode = \"overwrite\") {\n    const params = {\n      path: `/${file}`,\n      mode,\n      autorename: false,\n      mute: true\n    };\n    await request({\n      path: `https://content.dropboxapi.com/2/files/upload?${stringifyParams(params)}`,\n      method: \"POST\",\n      contentType: \"application/octet-stream\",\n      body: data\n    });\n  }\n  \n  async function post(file, data) {\n    try {\n      return await put(file, data, \"add\");\n    } catch (err) {\n      if (err.code === 409 && err.message.includes(\"conflict\")) {\n        err.code = \"EEXIST\";\n      }\n      throw err;\n    }\n  }\n  \n  async function delete_(file) {\n    try {\n      await requestRPC({\n        path: \"files/delete_v2\",\n        body: {\n          path: `/${file}`\n        }\n      });\n    } catch (err) {\n      if (err.code === 409 && err.message.includes(\"not_found\")) {\n        return;\n      }\n      throw err;\n    }\n  }\n}\n\nmodule.exports = createDrive;\n","/* global self */\nconst {createRequest} = require(\"../request\");\n\nfunction createDrive({\n  getAccessToken,\n  fetch = (typeof self !== \"undefined\" ? self : global).fetch\n}) {\n  const request = createRequest({fetch, getAccessToken});\n  return {\n    name: \"onedrive\",\n    get,\n    put,\n    post,\n    delete: delete_,\n    list\n  };\n  \n  async function query(args) {\n    args.path = `https://graph.microsoft.com/v1.0/me/drive/special/approot${args.path}`;\n    return await request(args);\n  }\n  \n  async function list(file) {\n    if (file) {\n      file = `:/${file}:`;\n    }\n    let result = await query({\n      path: `${file}/children?select=name`\n    });\n    let files = result.value.map(i => i.name);\n    while (result[\"@odata.nextLink\"]) {\n      result = await request({\n        path: result[\"@odata.nextLink\"]\n      });\n      files = files.concat(result.value.map(i => i.name));\n    }\n    return files;\n  }\n  \n  async function get(file) {\n    return await query({\n      path: `:/${file}:/content`,\n      format: \"text\"\n    });\n  }\n  \n  async function put(file, data) {\n    await query({\n      method: \"PUT\",\n      path: `:/${file}:/content`,\n      headers: {\n        \"Content-Type\": \"text/plain\"\n      },\n      body: data\n    });\n  }\n  \n  async function post(file, data) {\n    try {\n      await query({\n        method: \"PUT\",\n        path: `:/${file}:/content?@microsoft.graph.conflictBehavior=fail`,\n        headers: {\n          \"Content-Type\": \"text/plain\"\n        },\n        body: data\n      });\n    } catch (err) {\n      if (err.code === 409 && err.message.includes(\"nameAlreadyExists\")) {\n        err.code = \"EEXIST\";\n      }\n      throw err;\n    }\n  }\n  \n  async function delete_(file) {\n    try {\n      await query({\n        method: \"DELETE\",\n        path: `:/${file}:`\n      });\n    } catch (err) {\n      if (err.code === 404) {\n        return;\n      }\n      throw err;\n    }\n  }\n}\n\nmodule.exports = createDrive;\n","/* global self */\nconst {createRequest, RequestError} = require(\"../request\");\nconst {LockError} = require(\"../lock\");\n\nfunction createDrive({\n  getAccessToken,\n  fetch = (typeof self !== \"undefined\" ? self : global).fetch,\n  FormData = (typeof self !== \"undefined\" ? self : global).FormData,\n  Blob = (typeof self !== \"undefined\" ? self : global).Blob\n}) {\n  const request = createRequest({fetch, getAccessToken});\n  const fileMetaCache = new Map;\n  let lockRev;\n  return {\n    name: \"google\",\n    get,\n    put,\n    post,\n    delete: delete_,\n    list,\n    init,\n    acquireLock,\n    releaseLock,\n    fileMetaCache\n  };\n  \n  async function revDelete(fileId, revId) {\n    await request({\n      method: \"DELETE\",\n      path: `https://www.googleapis.com/drive/v3/files/${fileId}/revisions/${revId}`\n    });\n  }\n  \n  async function acquireLock(expire) {\n    const lock = fileMetaCache.get(\"lock.json\");\n    const {headRevisionId} = await queryPatch(lock.id, JSON.stringify({expire: Date.now() + expire * 60 * 1000}), {keepRevisionForever: true});\n    const result = await request({\n      path: `https://www.googleapis.com/drive/v3/files/${lock.id}/revisions?fields=revisions(id)`\n    });\n    for (let i = 1; i < result.revisions.length; i++) {\n      const revId = result.revisions[i].id;\n      if (revId === headRevisionId) {\n        // success\n        lockRev = headRevisionId;\n        return;\n      }\n      const rev = JSON.parse(await request({\n        path: `https://www.googleapis.com/drive/v3/files/${lock.id}/revisions/${revId}?alt=media`\n      }));\n      if (rev.expire > Date.now()) {\n        // failed, delete the lock\n        await revDelete(lock.id, headRevisionId);\n        throw new LockError(rev.expire);\n      }\n      // delete outdated lock\n      await revDelete(lock.id, revId);\n    }\n    throw new Error(\"cannot find lock revision\");\n  }\n  \n  async function releaseLock() {\n    const lock = fileMetaCache.get(\"lock.json\");\n    await revDelete(lock.id, lockRev);\n    lockRev = null;\n  }\n  \n  async function queryList(path, onPage) {\n    path = \"https://www.googleapis.com/drive/v3/files?spaces=appDataFolder&fields=nextPageToken,files(id,name,headRevisionId)\" + (path ? \"&\" + path : \"\");\n    let result = await request({path});\n    onPage(result);\n    while (result.nextPageToken) {\n      result = await request({path: `${path}&pageToken=${result.nextPageToken}`});\n      onPage(result);\n    }\n  }\n  \n  async function queryPatch(id, text, query) {\n    let path = `https://www.googleapis.com/upload/drive/v3/files/${id}?uploadType=media&fields=headRevisionId`;\n    if (query) {\n      path += `&${new URLSearchParams(query).toString()}`;\n    }\n    return await request({\n      method: \"PATCH\",\n      path,\n      headers: {\n        \"Content-Type\": \"text/plain\"\n      },\n      body: text\n    });\n  }\n  \n  async function updateMeta(query) {\n    if (query) {\n      query = `q=${encodeURIComponent(query)}`;\n    }\n    await queryList(query, result => {\n      for (const file of result.files) {\n        fileMetaCache.set(file.name, file);\n      }\n    });\n  }\n  \n  async function init() {\n    await updateMeta();\n    if (!fileMetaCache.has(\"lock.json\")) {\n      await post(\"lock.json\", \"{}\");\n    }\n    if (!fileMetaCache.has(\"meta.json\")) {\n      await post(\"meta.json\", \"{}\");\n    }\n  }\n  \n  async function list(file) {\n    // FIXME: this only works if file is a single dir\n    // FIXME: this only works if the list method is called right after init, use\n    // queryList instead?\n    return [...fileMetaCache.values()]\n      .filter(f => f.name.startsWith(file + \"/\"))\n      .map(f => f.name.split(\"/\")[1]);\n  }\n  \n  async function get(file) {\n    let meta = fileMetaCache.get(file);\n    if (!meta) {\n      await updateMeta(`name = '${file}'`);\n      meta = fileMetaCache.get(file);\n      if (!meta) {\n        throw new RequestError(`metaCache doesn't contain ${file}`, null, \"ENOENT\");\n      }\n    }\n    try {\n      return await request({\n        path: `https://www.googleapis.com/drive/v3/files/${meta.id}?alt=media`\n      });\n    } catch (err) {\n      if (err.code === 404) {\n        err.code = \"ENOENT\";\n      }\n      throw err;\n    }\n  }\n  \n  async function put(file, data) {\n    if (!fileMetaCache.has(file)) {\n      return await post(file, data);\n    }\n    const meta = fileMetaCache.get(file);\n    const result = await queryPatch(meta.id, data);\n    meta.headRevisionId = result.headRevisionId;\n  }\n  \n  async function post(file, data) {\n    const body = new FormData;\n    const meta = {\n      name: file,\n      parents: [\"appDataFolder\"]\n    };\n    body.append(\"metadata\", new Blob([JSON.stringify(meta)], {type: \"application/json; charset=UTF-8\"}));\n    body.append(\"media\", new Blob([data], {type: \"text/plain\"}));\n    const result = await request({\n      method: \"POST\",\n      path: \"https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&fields=id,name,headRevisionId\",\n      body\n    });\n    fileMetaCache.set(result.name, result);\n  }\n  \n  async function delete_(file) {\n    const meta = fileMetaCache.get(file);\n    if (!meta) {\n      return;\n    }\n    try {\n      await request({\n        method: \"DELETE\",\n        path: `https://www.googleapis.com/drive/v3/files/${meta.id}`\n      });\n    } catch (err) {\n      if (err.code === 404) {\n        return;\n      }\n      throw err;\n    }\n  }\n}\n\nmodule.exports = createDrive;\n","export function dirname(path) {\n  const dir = path.replace(/[/\\\\][^/\\\\]+\\/?$/, \"\");\n  if (dir === path) return \".\";\n  return dir;\n}\n\nexport function basename(path) {\n  const match = path.match(/([^/\\\\]+)[/\\\\]*$/);\n  return match ? match[1] : \"\";\n}\n","/* global self */\nconst {dirname, basename} = require(\"path\");\n\nconst {createRequest} = require(\"../request\");\nconst {createXMLParser} = require(\"../util\");\n\nfunction arrayify(o) {\n  return Array.isArray(o) ? o : [o];\n}\n\nfunction createDrive({\n  username,\n  password,\n  url,\n  fetch = (typeof self !== \"undefined\" ? self : global).fetch,\n  DOMParser = (typeof self !== \"undefined\" ? self : global).DOMParser,\n  parseXML = createXMLParser(DOMParser)\n}) {\n  if (!url.endsWith(\"/\")) {\n    url += \"/\";\n  }\n  let lockToken;\n  const request = createRequest({fetch, username, password});\n  return {\n    name: \"webdav\",\n    get,\n    put,\n    post,\n    delete: delete_,\n    list,\n    // acquireLock,\n    // releaseLock\n  };\n  \n  async function requestDAV({path, ...args}) {\n    if (lockToken) {\n      args.headers = args.headers || {};\n      args.headers[\"If\"] = `(${lockToken})`;\n    }\n    const text = await request({\n      path: `${url}${path}`,\n      ...args\n    });\n    if (args.format || typeof text !== \"string\" || !text) return text;\n    const result = await parseXML(text);\n    if (result.error) {\n      throw new Error(`Failed requesting DAV at ${url}${path}: ${JSON.stringify(result.error)}`);\n    }\n    if (result.multistatus) {\n      result.multistatus.response = arrayify(result.multistatus.response);\n      for (const r of result.multistatus.response) {\n        if (r.error) {\n          throw new Error(`Failed requesting DAV at ${url}${path}: ${r.href} ${r.error}`);\n        }\n      }\n    }\n    return result;\n  }\n  \n  async function list(file) {\n    if (!file.endsWith(\"/\")) {\n      file += \"/\";\n    }\n    const result = await requestDAV({\n      method: \"PROPFIND\",\n      path: file,\n      contentType: \"application/xml\",\n      body: \n        `<?xml version=\"1.0\" encoding=\"utf-8\" ?> \n        <propfind xmlns=\"DAV:\">\n          <allprop/>\n        </propfind>`,\n      headers: {\n        \"Depth\": \"1\"\n      }\n    });\n    \n    const files = [];\n    for (const entry of arrayify(result.multistatus.response)) {\n      if (arrayify(entry.propstat).some(s => s.prop.resourcetype && s.prop.resourcetype.collection !== undefined)) {\n        continue;\n      }\n      // FIXME: what is the proper way to get the filename from entry?\n      // NOTE: some servers may treat `@` and `%40` as the same path, we may have to normalize them here and there.\n      const base = `${url}${file}`;\n      const absUrl = new URL(entry.href, base).href;\n      const name = basename(absUrl);\n      files.push(name);\n    }\n    return files;\n  }\n  \n  async function get(file) {\n    return await requestDAV({\n      method: \"GET\",\n      path: file,\n      format: \"text\"\n    });\n  }\n  \n  async function put(file, data) {\n    return await withDir(\n      dirname(file),\n      () => requestDAV({\n        method: \"PUT\",\n        path: file,\n        contentType: \"application/octet-stream\",\n        body: data\n      })\n    );\n  }\n  \n  async function withDir(dir, cb) {\n    try {\n      return await cb();\n    } catch (err) {\n      if (err.code !== 409 && err.code !== 404 || dir === \".\") {\n        throw err;\n      }\n    }\n    await withDir(dirname(dir), () =>\n      requestDAV({\n        method: \"MKCOL\",\n        path: dir\n      })\n    );\n    return await cb();\n  }\n  \n  async function post(file, data) {\n    try {\n      return await withDir(\n        dirname(file),\n        () => requestDAV({\n          method: \"PUT\",\n          path: file,\n          body: data,\n          contentType: \"octet-stream\",\n          headers: {\n            // FIXME: seems webdav-server doesn't support etag, what about others?\n            \"If-None-Match\": \"*\"\n          }\n        })\n      );\n    } catch (err) {\n      if (err.code === 412) {\n        err.code = \"EEXIST\";\n      }\n      throw err;\n    }\n  }\n  \n  async function delete_(file) {\n    // FIXME: support deleting collections?\n    // FIXME: handle errors?\n    try {\n      await requestDAV({\n        method: \"DELETE\",\n        path: file\n      });\n    } catch (err) {\n      if (err.code === 404) return;\n      throw err;\n    }\n  }\n  \n  // async function acquireLock(mins) {\n    // const r = await requestDAV({\n      // method: \"LOCK\",\n      // path: \"\",\n      // body: \n        // `<?xml version=\"1.0\" encoding=\"utf-8\" ?> \n        // <lockinfo xmlns='DAV:'> \n          // <lockscope><exclusive/></lockscope> \n          // <locktype><write/></locktype> \n        // </lockinfo> `,\n      // headers: {\n        // \"Timeout\": `Second-${mins * 60}`\n      // },\n      // raw: true\n    // });\n    // lockToken = r.headers.get(\"Lock-Token\");\n  // }\n  \n  // async function releaseLock() {\n    // await requestDAV({\n      // method: \"UNLOCK\",\n      // path: \"\",\n      // headers: {\n        // \"Lock-Token\": lockToken\n      // }\n    // });\n  // }\n}\n\nmodule.exports = createDrive;\n"],"names":["createLock","maxActiveReader","Infinity","firstTask","lastTask","activeReader","self","read","fn","que","write","length","block","task","createTask","next","prev","deque","q","promise","defer","o","Promise","resolve","reject","q2","result","err","onDone","then","_onDone","pending","afterDone","LockError","Error","constructor","expire","concat","Date","toLocaleString","name","captureStackTrace","debounced","timer","clearTimeout","setTimeout","run","delay","time","xmlToJSON","node","children","Array","prototype","filter","call","childNodes","i","nodeType","textContent","_iterator","_createForOfIteratorHelper","_step","s","n","done","c","value","cResult","localName","isArray","list","push","e","f","createXMLParser","DOMParser","parser","parseXML","text","xml","parseFromString","buildDrive","_drive","drive","Object","create","get","_ref","_asyncToGenerator","path","JSON","parse","_x","apply","arguments","put","_ref2","data","stringify","_x2","_x3","post","_ref3","_x4","_x5","isInit","acquireLock","releaseLock","getMeta","putMeta","peekChanges","_x6","_acquireLock","now","code","delete","_releaseLock","_getMeta","_x7","_putMeta","_x8","_peekChanges","oldMeta","newMeta","lastChange","dbToCloud","onGet","onPut","onDelete","onFirstSync","onWarn","console","error","onProgress","compareRevision","getState","setState","lockExpire","retryMaxAttempts","retryExp","retryDelay","state","meta","changeCache","Map","saveState","revisionCache","lock","use","init","uninit","delete_","syncNow","Boolean","enabled","newDrive","queue","clear","syncPull","_syncPull","changes","map","action","_id","slice","end","Math","floor","newChanges","set","idx","change","loaded","_iterator2","_step2","_step2$value","_slicedToArray","id","doc","_rev","phase","total","size","_yield$_drive2$get","rev","syncPush","_syncPush","_iterator3","_step3","_iterator4","values","_step4","remoteRev","undefined","_i","_newChanges","lastChanges","index","len","window","sync","_sync","tried","wait","lastErr","peek","_syncNow","_syncNow2","changed","percentToByte","p","String","fromCharCode","parseInt","encode","str","btoa","encodeURIComponent","replace","byteToPercent","b","charCodeAt","toString","decode","decodeURIComponent","from","atob","join","RequestError","message","origin","status","createRequest","fetch","cooldown","getAccessToken","username","password","basicAuth","base64","args","doRequest","method","_doRequest","contentType","_headers","headers","format","_ref2$raw","raw","_objectWithoutProperties","_excluded","assign","res","_objectSpread","ok","retry","Number","resContentType","test","json","createDrive","userAgent","owner","repo","global","request","shaCache","requestAPI","_list","file","names","item","sha","_get","content","_put","overwrite","params","has","body","retried","includes","_delete_","requestRPC","entries","entry","has_more","cursor","stringifyParams","obj","URLSearchParams","mode","autorename","mute","_post","query","_query","files","FormData","Blob","fileMetaCache","lockRev","revDelete","_revDelete","fileId","revId","_yield$queryPatch","queryPatch","keepRevisionForever","headRevisionId","revisions","queryList","_queryList","onPage","nextPageToken","_queryPatch","updateMeta","_x9","_updateMeta","_init","_x0","startsWith","split","_x1","_x10","_x11","_x12","_x13","parents","append","type","_x14","dirname","dir","basename","match","arrayify","url","endsWith","requestDAV","_requestDAV","multistatus","response","r","href","propstat","some","prop","resourcetype","collection","base","absUrl","URL","withDir","_withDir","cb"],"mappings":"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"}